#!/usr/bin/env perl
### varscan.pl ######################################################################################
use AutoLoader 'AUTOLOAD';
use strict;
use warnings;
use Carp;
use Getopt::Std;
use Getopt::Long;
use POSIX qw(strftime);
use File::Basename;
use File::Path qw(make_path);
use YAML qw(LoadFile);
use List::Util 'first';
use IO::Handle;

my $cwd = dirname($0);
require "$cwd/utilities.pl";

# define some global variables
our ($reference, $pon) = undef;

####################################################################################################
# version       author		comment
# 1.0		sprokopec       script to run VarScan
# 1.1		sprokopec	added help msg and cleaned up code
# 1.2           sprokopec       minor updates for tool config

### USAGE ##########################################################################################
# varscan.pl -t tool_config.yaml -d data_config.yaml -o /path/to/output/dir -c slurm --remove --dry_run
#
# where:
#	-t (tool.yaml) contains tool versions and parameters, reference information, etc.
#	-d (data.yaml) contains sample information (YAML file containing paths to BWA-aligned,
#		GATK-processed BAMs, generated by gatk.pl)
#	-o (/path/to/output/dir) indicates tool-specific output directory
#	-c indicates hpc driver (ie, slurm)
#	--remove indicates that intermediates will be removed
#	--dry_run indicates that this is a dry run

### DEFINE SUBROUTINES #############################################################################
# format command to run VarScan SNV calling
sub get_varscan_snv_command {
	my %args = (
		tumour		=> undef,
		normal		=> undef,
		output_stem	=> undef,
		java_mem	=> undef,
		tmp_dir		=> undef,
		intervals	=> undef,
		output_vcf	=> 0,
		@_
		);

	my $varscan_command;

	if (defined($args{normal})) {

		# because I don't have a script to convert this output to vcf, I use the output-vcf option
		# BUT, because downstream tools (Sequenza) need the .snp format, I also run it without
		$varscan_command = join(' ',
			'samtools mpileup -B -q1 -d10000',
			'-f', $reference
			);

		if (defined($args{intervals})) {
			$varscan_command .= " -l $args{intervals} ";
			}

		$varscan_command .= join(' ',
			$args{normal}, $args{tumour},
			'|', 'awk -F"\\t"', "'\$4 > 0 && \$7 > 0'",
			'|', 'java -Xmx' . $args{java_mem},
			'-Djava.io.tmpdir=' . $args{tmp_dir},
			'-jar $varscan_dir/VarScan.jar somatic -',
			$args{output_stem},
			'--mpileup 1'
			);

		if ($args{output_vcf}) {
			$varscan_command .= ' --output-vcf 1';
			};

		} else {

		$varscan_command = join(' ',
			'samtools mpileup -B -q1 -d10000',
			'-f', $reference
			);

		if (defined($args{intervals})) {
			$varscan_command .= " -l $args{intervals} ";
			}

		$varscan_command .= join(' ',
			$args{tumour},
			'|', 'awk -F"\\t"', "'\$4 > 0'",
			'|', 'java -Xmx' . $args{java_mem},
			'-Djava.io.tmpdir=' . $args{tmp_dir},
			'-jar $varscan_dir/VarScan.jar mpileup2cns -',
			'--output-vcf 1 --variants 1',
			'>', $args{output_stem} . '.cns.vcf'
			);
		}

	return($varscan_command);
	}

# format command ro tun VarScan processSomatic
sub get_varscan_process_command {
	my %args = (
		output_stem	=> undef,
		java_mem	=> undef,
		tmp_dir		=> undef,
		@_
		);

	my $process_command = join(' ',
		'java -Xmx' . $args{java_mem},
		'-Djava.io.tmpdir=' . $args{tmp_dir},
		'-jar $varscan_dir/VarScan.jar processSomatic',
		$args{output_stem} . '.snp'
		);

	$process_command .= "\n\n" . join(' ',
		'java -Xmx' . $args{java_mem},
		'-Djava.io.tmpdir=' . $args{tmp_dir},
		'-jar $varscan_dir/VarScan.jar processSomatic',
		$args{output_stem} . '.indel'
		);

	return($process_command);
	}

# format command to run VarScan CNV calling
sub get_varscan_cnv_command {
	my %args = (
		tumour		=> undef,
		normal		=> undef,
		output_stem	=> undef,
		java_mem	=> undef,
		tmp_dir		=> undef,
		intervals	=> undef,
		@_
		);

	my $varscan_command = join(' ',
		'samtools mpileup -B -q1 -d10000',
		'-f', $reference
		);

	if (defined($args{intervals})) {
		$varscan_command .= " -l $args{intervals} ";
		}

	$varscan_command .= join(' ',
		$args{normal}, $args{tumour},
		'|', 'awk -F"\\t"', "'\$4 > 0 && \$7 > 0'",
		'|', 'java -Xmx' . $args{java_mem},
		'-Djava.io.tmpdir=' . $args{tmp_dir},
		'-jar $varscan_dir/VarScan.jar copynumber -',
		$args{output_stem},
		'--mpileup 1'
		);

	$varscan_command .= "\n\n" . join(' ',
		'java -Xmx' . $args{java_mem},
		'-Djava.io.tmpdir=' . $args{tmp_dir},
		'-jar $varscan_dir/VarScan.jar copyCaller',
		$args{output_stem} . '.copynumber',
		'--output-file', $args{output_stem} . '.copynumber.called'
		);

	return($varscan_command);
	}

# format command to run Sequenza
sub get_sequenza_command {
	my %args = (
		tool	=> undef,
		snp	=> undef,
		cnv	=> undef,
		out_dir	=> undef,
		@_
		);

	my $sequenza_command = join(' ',
		'Rscript', $args{tool},
		'--snp_file', $args{snp},
		'--cnv_file', $args{cnv},
		'--out_dir', $args{out_dir},
		'--cancer_type OV'
		);

	return($sequenza_command);
	}

# format command to run variant filter
sub get_filter_command {
	my %args = (
		input		=> undef,
		output_stem	=> undef,
		tmp_dir		=> undef,
		pon		=> undef,
		somatic		=> 0,
		@_
		);

	my $filter_command;

	# if tool used was somatic (T/N pair), split snp/indel into germline/somatic 
	if ($args{somatic}) {

		$filter_command = "if [ ! -s $args{input}.gz.tbi ]; then\n";
		$filter_command .= "  bgzip $args{input}\n";
		$filter_command .= "  tabix -p vcf $args{input}.gz\n";
		$filter_command .= "fi\n\n";

		$filter_command .= join(' ',
			"awk 'NR>1 { print \$1" . '"\t"' . "\$2 }'", "$args{output_stem}.Germline.hc",
			'|', '/cluster/projects/pughlab/bin/bcftools/bcftools filter',
			'-T - ',
			"--include 'INFO/SS=" . '"1"' . "'",
			"$args{input}.gz",
			'-O v',
			'-o', $args{output_stem} . "_germline_hc.vcf"
			);
 
		$filter_command .= "\n\n" . join(' ',
			"awk 'NR>1 { print \$1" . '"\t"' . "\$2 }'", "$args{output_stem}.Somatic.hc",
			'|', '/cluster/projects/pughlab/bin/bcftools/bcftools filter',
			'-T - ',
			"--include 'INFO/SS=" . '"2"' . "'",
			"$args{input}.gz",
			'-O v',
			'-o', $args{output_stem} . "_somatic_hc.vcf"
			);

	# else, for tumour-only, split into snp/indel
	} else {
		$filter_command = join(' ',
			'vcftools',
			'--vcf', $args{input},
			'--keep-filtered PASS --remove-indels',
			'--stdout --recode',
			'--temp', $args{tmp_dir}
			);

		if (defined($args{pon})) {
			$filter_command .= " --exclude-positions $args{pon}";
			}

		$filter_command .= ' > ' . $args{output_stem} . ".snp.vcf";

		$filter_command .= "\n\n" . join(' ',
			'vcftools',
			'--vcf', $args{input},
			'--keep-filtered PASS --keep-only-indels',
			'--stdout --recode',
			'--temp', $args{tmp_dir},
			'>', $args{output_stem} . ".indel.vcf"
			);
		}

	return($filter_command);
	}

# format command to generate PON
sub  generate_pon {
	my %args = (
		input		=> undef,
		output		=> undef,
		java_mem	=> undef,
		tmp_dir		=> undef,
		out_type	=> 'full',
		@_
		);

	my $pon_command = join(' ',
		'java -Xmx' . $args{java_mem},
		'-Djava.io.tmpdir=' . $args{tmp_dir},
		'-jar $gatk_dir/GenomeAnalysisTK.jar -T CombineVariants',
		'-R', $reference,
		$args{input},
		'-o', $args{output},
		'--filteredrecordsmergetype KEEP_IF_ANY_UNFILTERED',
		'--genotypemergeoption UNSORTED --filteredAreUncalled'
		);

	if ('trimmed' eq $args{out_type}) {
		$pon_command .= ' -minN 2 -minimalVCF -suppressCommandLineHeader --excludeNonVariants --sites_only';
		}

	return($pon_command);
	}

### MAIN ###########################################################################################
sub main {
	my %args = (
		tool_config		=> undef,
		data_config		=> undef,
		output_directory	=> undef,
		pon			=> undef,
		hpc_driver		=> undef,
		del_intermediates	=> undef,
		dry_run			=> undef,
		no_wait			=> undef,
		@_
		);

	my $tool_config = $args{tool_config};
	my $data_config = $args{data_config};

	### PREAMBLE ######################################################################################

	# load tool config
	my $tool_data_orig = LoadFile($tool_config);
	my $tool_data = error_checking(tool_data => $tool_data_orig, pipeline => 'varscan');
	my $date = strftime "%F", localtime;

	# organize output and log directories
	my $output_directory = $args{output_directory};
	$output_directory =~ s/\/$//;

	my $log_directory = join('/', $output_directory, 'logs', 'RUN_PAIRED_MODE');
	unless(-e $log_directory) { make_path($log_directory); }

	my $log_file = join('/', $log_directory, 'run_VarScan_PAIRED_MODE_pipeline.log');

	# create a file to hold job metrics
	my (@files, $run_count, $outfile, $touch_exit_status);
	unless ($args{dry_run}) {
		# initiate a file to hold job metrics
		opendir(LOGFILES, $log_directory) or die "Cannot open $log_directory";
		@files = grep { /slurm_job_metrics/ } readdir(LOGFILES);
		$run_count = scalar(@files) + 1;
		closedir(LOGFILES);

		$outfile = $log_directory . '/slurm_job_metrics_' . $run_count . '.out';
		$touch_exit_status = system("touch $outfile");
		if (0 != $touch_exit_status) { Carp::croak("Cannot touch file $outfile"); }

		$log_file = join('/', $log_directory, 'run_VarScan_PAIRED_MODE_pipeline_' . $run_count . '.log');
		}

	# start logging
	open (my $log, '>', $log_file) or die "Could not open $log_file for writing.";
	$log->autoflush;

	print $log "---\n";
	print $log "Running VarScan variant calling pipeline in T/N mode.\n";
	print $log "\n  Tool config used: $tool_config";
	print $log "\n    Reference used: $tool_data->{reference}";

	$reference = $tool_data->{reference};
	
	if (defined($tool_data->{intervals_bed})) {
		print $log "\n    Target intervals (exome): $tool_data->{intervals_bed}";
		}

	print $log "\n    Output directory: $output_directory";
	print $log "\n  Sample config used: $data_config";
	print $log "\n---";

	# set tools and versions
	my $varscan	= 'varscan/' . $tool_data->{varscan_version};
	my $samtools	= 'samtools/' . $tool_data->{samtools_version};
	my $vcftools	= 'vcftools/' . $tool_data->{vcftools_version};
	my $gatk	= 'gatk/' . $tool_data->{gatk_version};
	my $sequenza	= $tool_data->{varscan}->{parameters}->{sequenza}->{path};
	my $r_version	= 'R/' . $tool_data->{r_version};
	my $r_sequenza	= 'R/' . $tool_data->{varscan}->{parameters}->{sequenza}->{r};

	# get user-specified tool parameters
	my $parameters = $tool_data->{varscan}->{parameters};

	### RUN ###########################################################################################
	# get sample data
	my $smp_data = LoadFile($data_config);

	my ($run_script, $cnv_run_id, $varscan_run_id, $sequenza_run_id, $run_id, $link, $cleanup_cmd);
	my (@all_jobs, @pon_vcfs);

	my $pon_directory = join('/', $output_directory, 'PanelOfNormals');
	unless(-e $pon_directory) { make_path($pon_directory); }

	my $pon_intermediates = join('/', $pon_directory, 'intermediates');
	unless(-e $pon_intermediates) { make_path($pon_intermediates); }

	# process each sample in $smp_data
	foreach my $patient (sort keys %{$smp_data}) {

		print $log "\nInitiating process for PATIENT: $patient\n";

		# find bams
		my @normal_ids = keys %{$smp_data->{$patient}->{'normal'}};
		my @tumour_ids = keys %{$smp_data->{$patient}->{'tumour'}};

		if (scalar(@normal_ids) == 0) {
			print $log "\n>> No normal BAM provided, skipping patient.\n";
			next;
			}

		# create some directories
		my $patient_directory = join('/', $output_directory, $patient);
		unless(-e $patient_directory) { make_path($patient_directory); }

		my $tmp_directory = join('/', $patient_directory, 'TEMP');
		unless(-e $tmp_directory) { make_path($tmp_directory); }

		# indicate this should be removed at the end
		$cleanup_cmd = "rm -rf $tmp_directory";

		my $link_directory = join('/', $patient_directory, 'bam_links');
		unless(-e $link_directory) { make_path($link_directory); }

		# create some symlinks
		foreach my $normal (@normal_ids) {
			my @tmp = split /\//, $smp_data->{$patient}->{normal}->{$normal};
			$link = join('/', $link_directory, $tmp[-1]);
			symlink($smp_data->{$patient}->{normal}->{$normal}, $link);
			}
		foreach my $tumour (@tumour_ids) {
			my @tmp = split /\//, $smp_data->{$patient}->{tumour}->{$tumour};
			$link = join('/', $link_directory, $tmp[-1]);
			symlink($smp_data->{$patient}->{tumour}->{$tumour}, $link);
			}

		# create an array to hold final outputs and all patient job ids
		my (@germline_vcfs, @final_outputs, @patient_jobs);

		# for T/N pair
		foreach my $sample (@tumour_ids) {

			print $log "  SAMPLE: $sample\n\n";

			my $sample_directory = join('/', $patient_directory, $sample);
			unless(-e $sample_directory) { make_path($sample_directory); }

			my $sequenza_directory = join('/', $sample_directory, 'Sequenza');
			unless(-e $sequenza_directory) { make_path($sequenza_directory); }

			$run_id = '';
			$cnv_run_id = '';
			$varscan_run_id = '';
			$sequenza_run_id = '';
			my @snp_jobs;

			# create output stem
			my $output_stem = join('/', $sample_directory, $sample . '_VarScan');
			$cleanup_cmd .= "\nrm $output_stem";

			# start with VarScan CNV caller
			# only for paired tumour/normal
			my $cnv_output = $output_stem . '.copynumber.called';
			$cleanup_cmd .= "\nrm $output_stem.copynumber";

			my $varscan_command = get_varscan_cnv_command(
				tumour		=> $smp_data->{$patient}->{tumour}->{$sample},
				normal		=> $smp_data->{$patient}->{normal}->{$normal_ids[0]},
				output_stem	=> $output_stem,
				java_mem	=> $parameters->{varscan}->{java_mem},
				tmp_dir		=> $tmp_directory,
				intervals	=> $tool_data->{intervals_bed}
				);

			$varscan_command .= "\n\nmd5sum $output_stem.copynumber > $output_stem.copynumber.md5";
			$varscan_command .= "\n\nmd5sum $cnv_output > $cnv_output.md5";

			# check if this should be run
			if ('Y' eq missing_file($cnv_output . ".md5")) {

				# record command (in log directory) and then run job
				print $log "Submitting job for VarScan CNV Caller...\n";

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_varscan_cnv_' . $sample,
					cmd	=> $varscan_command,
					modules	=> [$samtools, $varscan],
					max_time	=> $parameters->{varscan}->{time},
					mem		=> $parameters->{varscan}->{mem},
					hpc_driver	=> $args{hpc_driver}
					);

				$cnv_run_id = submit_job(
					jobname		=> 'run_varscan_cnv_' . $sample,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @patient_jobs, $cnv_run_id;
				push @all_jobs, $cnv_run_id;
				}
			else {
				print $log "Skipping VarScan CNV Caller because this has already been completed!\n";
				}

			# next, I also need the .snp output format for Sequenza, so run that here
			$varscan_command = get_varscan_snv_command(
				tumour		=> $smp_data->{$patient}->{tumour}->{$sample},
				normal		=> $smp_data->{$patient}->{normal}->{$normal_ids[0]},
				output_stem	=> $output_stem,
				java_mem	=> $parameters->{varscan}->{java_mem},
				tmp_dir		=> $tmp_directory,
				intervals	=> $tool_data->{intervals_bed}
				);

			$varscan_command .= "\n\nmd5sum $output_stem.snp > $output_stem.snp.md5";
			$varscan_command .= "\nmd5sum $output_stem.indel > $output_stem.indel.md5";

			$cleanup_cmd .= "\nrm $output_stem.snp";
			$cleanup_cmd .= "\nrm $output_stem.indel";

			# check if this should be run
			if ('Y' eq missing_file("$output_stem.snp.md5")) {

				# record command (in log directory) and then run job
				print $log "Submitting job for VarScan (for Sequenza)...\n";

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_varscan_snv_for_sequenza_' . $sample,
					cmd	=> $varscan_command,
					modules	=> [$samtools, $varscan],
					max_time	=> $parameters->{varscan}->{time},
					mem		=> $parameters->{varscan}->{mem},
					hpc_driver	=> $args{hpc_driver}
					);

				$varscan_run_id = submit_job(
					jobname		=> 'run_varscan_snv_for_sequenza_' . $sample,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @snp_jobs, $varscan_run_id;
				push @patient_jobs, $varscan_run_id;
				push @all_jobs, $varscan_run_id;
				}
			else {
				print $log "Skipping VarScan (for Sequenza) because this has already been completed!\n";
				}

			# format command for sequenza (T/N only)
			my $sequenza_output = join('/', $sequenza_directory, $sample . '_VarScan_Total_CN.seg');
			my $sequenza_command = get_sequenza_command(
				out_dir	=> $sequenza_directory,
				snp	=> $output_stem . '.snp',
				cnv	=> $output_stem . '.copynumber',
				tool	=> $sequenza
				);

			# check if this should be run
			if ('Y' eq missing_file($sequenza_output)) {

				# record command (in log directory) and then run job
				print $log "Submitting job for Sequenza...\n";

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_sequenza_' . $sample,
					cmd	=> $sequenza_command,
					modules	=> [$r_sequenza],
					dependencies	=> join(':', $varscan_run_id, $cnv_run_id),
					max_time	=> $parameters->{sequenza}->{time},
					mem		=> $parameters->{sequenza}->{mem},
					hpc_driver	=> $args{hpc_driver}
					);

				$sequenza_run_id = submit_job(
					jobname		=> 'run_sequenza_' . $sample,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @snp_jobs, $sequenza_run_id;
				push @patient_jobs, $sequenza_run_id;
				push @all_jobs, $sequenza_run_id;
				}
			else {
				print $log "Skipping Sequenza because this has already been completed!\n";
				}

			# now, because we have it, process the .snp and .indel files to split into
			# germline/somatic/loh, as well as high and low confidence calls
			$varscan_command = get_varscan_process_command(
				output_stem	=> $output_stem,
				java_mem	=> '256M',
				tmp_dir		=> $tmp_directory
				);

			$cleanup_cmd .= "\nrm $output_stem.indel.Germline";
			$cleanup_cmd .= "\nrm $output_stem.snp.Germline";
			$cleanup_cmd .= "\nrm $output_stem.indel.Somatic";
			$cleanup_cmd .= "\nrm $output_stem.snp.Somatic";
			$cleanup_cmd .= "\nrm $output_stem.indel.LOH";
			$cleanup_cmd .= "\nrm $output_stem.snp.LOH";

			# check if this should be run
			if ('Y' eq missing_file("$output_stem.snp.Somatic.hc")) {

				# record command (in log directory) and then run job
				print $log "Submitting job for processSomatic...\n";

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_varscan_processSomatic_' . $sample,
					cmd	=> $varscan_command,
					modules	=> [$samtools, $varscan],
					dependencies	=> $varscan_run_id,
					mem		=> '1G',
					hpc_driver	=> $args{hpc_driver}
					);

				$varscan_run_id = submit_job(
					jobname		=> 'run_varscan_processSomatic_' . $sample,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @snp_jobs, $varscan_run_id;
				push @patient_jobs, $varscan_run_id;
				push @all_jobs, $varscan_run_id;
				}
			else {
				print $log "Skipping processSomatic because this has already been completed!\n";
				}

			# Next, run VarScan SNV caller
			$varscan_command = get_varscan_snv_command(
				tumour		=> $smp_data->{$patient}->{tumour}->{$sample},
				normal		=> $smp_data->{$patient}->{normal}->{$normal_ids[0]},
				output_stem	=> $output_stem,
				java_mem	=> $parameters->{varscan}->{java_mem},
				tmp_dir		=> $tmp_directory,
				intervals	=> $tool_data->{intervals_bed},
				output_vcf	=> 1
				);

			$varscan_command .= "\n\nmd5sum $output_stem.snp.vcf > $output_stem.snp.vcf.md5";
			$varscan_command .= "\n\nmd5sum $output_stem.indel.vcf > $output_stem.indel.vcf.md5";

			# check if this should be run
			if ('Y' eq missing_file($output_stem . '.snp.vcf.md5')) {

				# record command (in log directory) and then run job
				print $log "Submitting job for VarScan SNV Caller...\n";

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_varscan_snv_' . $sample,
					cmd	=> $varscan_command,
					modules	=> [$samtools, $varscan],
					max_time	=> $parameters->{varscan}->{time},
					mem		=> $parameters->{varscan}->{mem},
					hpc_driver	=> $args{hpc_driver}
					);

				$run_id = submit_job(
					jobname		=> 'run_varscan_snv_' . $sample,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @snp_jobs, $run_id;
				push @patient_jobs, $run_id;
				push @all_jobs, $run_id;
				}
			else {
				print $log "Skipping VarScan SNV Caller because this has already been completed!\n";
				}

			# filter results
			my ($filter_command, $required);

			my @var_types = qw(snp indel);
			foreach my $vtype (@var_types) {

				$filter_command = get_filter_command(
					input		=> join('.', $output_stem, $vtype, 'vcf'),
					output_stem	=> join('.', $output_stem, $vtype),
					somatic		=> 1
					);

				$filter_command .= "\n\n" . join(' ',
					'md5sum', join('.',  $output_stem, $vtype . "_germline_hc.vcf"),
					'>', join('.',  $output_stem, $vtype . "_germline_hc.vcf.md5")
					);

				push @germline_vcfs, join('.', $output_stem, $vtype . "_germline_hc.vcf");

				$filter_command .= "\n\n" . join(' ',
					'md5sum', join('.',  $output_stem, $vtype . "_somatic_hc.vcf"),
					'>', join('.',  $output_stem, $vtype . "_somatic_hc.vcf.md5")
					);

				# add intermediates to cleanup
				$cleanup_cmd .= "\nrm " . join('.', $output_stem, $vtype, 'vcf.gz');
				$cleanup_cmd .= "\nrm " . join('.', $output_stem, $vtype, 'vcf.gz.tbi');

				$required = join('.', $output_stem, $vtype . "_somatic_hc.vcf.md5");

				my @dependencies = grep { $_ ne '' } @snp_jobs;
				if (scalar(@dependencies) == 0) { @dependencies[0] = ''; }

				# check if this should be run
				if ('Y' eq missing_file($required)) {

					# record command (in log directory) and then run job
					print $log "Submitting job for VCF-Filter ($vtype)...\n";

					$run_script = write_script(
						log_dir	=> $log_directory,
						name	=> join('_', 'run_vcf_filter', $vtype, $sample),
						cmd	=> $filter_command,
						modules	=> ['tabix'],
						dependencies	=> join(':', @dependencies),
						max_time	=> $parameters->{filter}->{time},
						mem		=> $parameters->{filter}->{mem},
						hpc_driver	=> $args{hpc_driver}
						);

					$run_id = submit_job(
						jobname		=> join('_', 'run_vcf_filter', $vtype, $sample),
						shell_command	=> $run_script,
						hpc_driver	=> $args{hpc_driver},
						dry_run		=> $args{dry_run},
						log_file	=> $log
						);

					push @patient_jobs, $run_id;
					push @all_jobs, $run_id;
					}
				else {
					print $log "Skipping VCF-Filter ($vtype) because this has already been completed!\n";
					}

				### Run variant annotation (VEP + vcf2maf)
				my ($vcf2maf_cmd, $final_maf, $final_vcf);

				$final_maf = join('.', $output_stem, $vtype . '_somatic_annotated.maf');
				$final_vcf = join('.', $output_stem, $vtype . '_somatic_annotated.vcf');

				$vcf2maf_cmd = get_vcf2maf_command(
					input		=> join('.', $output_stem, $vtype . '_somatic_hc.vcf'),
					tumour_id	=> $sample,
					normal_id	=> $normal_ids[0],
					reference	=> $reference,
					ref_type	=> $tool_data->{ref_type},
					output		=> $final_maf,
					tmp_dir		=> $tmp_directory,
					vcf2maf		=> $tool_data->{annotate}->{vcf2maf_path},
					vep_path	=> $tool_data->{annotate}->{vep_path},
					vep_data	=> $tool_data->{annotate}->{vep_data},
					filter_vcf	=> $tool_data->{annotate}->{filter_vcf}
					);

				# check if this should be run
				if ('Y' eq missing_file($final_maf . '.md5')) {

					# IF THIS FINAL STEP IS SUCCESSFULLY RUN
					$vcf2maf_cmd .= "\n\n" . join("\n",
						"if [ -s " . join(" ] && [ -s ", $final_maf) . " ]; then",
						"  md5sum $final_maf > $final_maf.md5",
						"  mv $tmp_directory/$sample\_VarScan.$vtype\_somatic_hc.vep.vcf $final_vcf",
						"  md5sum $final_vcf > $final_vcf.md5",
						"  bgzip $final_vcf",
						"  tabix -p vcf $final_vcf.gz",
						"else",
						'  echo "FINAL OUTPUT MAF is missing; not running md5sum/bgzip/tabix..."',
						"fi"
						);

					# record command (in log directory) and then run job
					print $log "Submitting job for T/N vcf2maf ($vtype)...\n";

					$run_script = write_script(
						log_dir	=> $log_directory,
						name	=> join('_', 'run_vcf2maf_and_VEP', $vtype, $sample),
						cmd	=> $vcf2maf_cmd,
						modules	=> ['perl', $samtools, 'tabix'],
						dependencies	=> $run_id,
						max_time	=> $tool_data->{annotate}->{time},
						mem		=> $tool_data->{annotate}->{mem}->{$vtype.'s'},
						hpc_driver	=> $args{hpc_driver}
						);

					$run_id = submit_job(
						jobname		=> join('_', 'run_vcf2maf_and_VEP', $vtype, $sample),
						shell_command	=> $run_script,
						hpc_driver	=> $args{hpc_driver},
						dry_run		=> $args{dry_run},
						log_file	=> $log
						);

					push @patient_jobs, $run_id;
					push @all_jobs, $run_id;
					}
				else {
					print $log "Skipping vcf2maf ($vtype) because this has already been completed!\n";
					}

				push @final_outputs, $final_maf;
				}
			}

		# before making the PoN, we will merge snp/indel results
		# as well as collapsing results from multi-tumour patients
		unless (defined($args{pon})) {

			my $merged_germline = join('/', $pon_intermediates, $patient . '_germline_variants.vcf');
			my $format_germline_cmd;
			my @intermediate_files;

			foreach my $sample (sort @tumour_ids) {

				my @smp_files = grep { /$sample/ } @germline_vcfs;
				my $snp_vcf = first { /snp/ } @smp_files;
				my $indel_vcf = first { /indel/ } @smp_files;

				my $tmp_vcf = join('/', $pon_intermediates, $sample . '_merged_variants.vcf');

				$format_germline_cmd .= "\n" . join(' ',
					'vcf-concat', $snp_vcf, $indel_vcf,
					'| vcf-sort -c -t', $tmp_directory,
					'>', $tmp_vcf
					);

				$format_germline_cmd .= "\n\n" . "bgzip $tmp_vcf";
				$format_germline_cmd .= "\n" . "tabix -p vcf $tmp_vcf.gz\n";

				push @intermediate_files, "$tmp_vcf.gz";
				$cleanup_cmd .= "\nrm $tmp_vcf.gz";
				}

			if (scalar(@tumour_ids) > 1) {

				$format_germline_cmd .= "\n\n" . join(' ',
					'vcf-isec -n +1',
					@intermediate_files,
					'| vcf-subset -c NORMAL',
					'>', $merged_germline
					);

				} else {

				$format_germline_cmd .= "\n\n" . join(' ',
					'vcf-subset -c NORMAL',
					$intermediate_files[0],
					'>', $merged_germline
					);
				}

			$format_germline_cmd .= "\n" . "md5sum $merged_germline > $merged_germline.md5";

			if ('Y' eq missing_file($merged_germline . '.md5')) {

				# record command (in log directory) and then run job
				print $log "Submitting job for PoN prep...\n";

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'collapse_germline_calls_' . $patient,
					cmd	=> $format_germline_cmd,
					modules	=> ['perl', $vcftools, 'tabix'],
					dependencies	=> join(':', @patient_jobs),
					hpc_driver	=> $args{hpc_driver}
					);

				$run_id = submit_job(
					jobname		=> 'collapse_germline_calls_' . $patient,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @patient_jobs, $run_id;
				}

			push @pon_vcfs, "-V:$patient $merged_germline";
			}

		# should intermediate files be removed
		# run per patient
		if ($args{del_intermediates}) {

			if (scalar(@patient_jobs) == 0) {
				`rm -rf $tmp_directory`;

				} else {

				print $log "Submitting job to clean up temporary/intermediate files...\n";

				# make sure final output exists before removing intermediate files!
				my @files_to_check;
				foreach my $tmp ( @final_outputs ) {
					$tmp .= '.md5';
					push @files_to_check, $tmp;
					}

				$cleanup_cmd = join("\n",
					"if [ -s " . join(" ] && [ -s ", @files_to_check) . " ]; then",
					"  $cleanup_cmd",
					"else",
					'  echo "One or more FINAL OUTPUT FILES is missing; not removing intermediates"',
					"fi"
					);

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_cleanup_' . $patient,
					cmd	=> $cleanup_cmd,
					dependencies	=> join(':', @patient_jobs),
					mem		=> '256M',
					hpc_driver	=> $args{hpc_driver}
					);

				$run_id = submit_job(
					jobname		=> 'run_cleanup_' . $patient,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);
				}
			}

		print $log "\nFINAL OUTPUT:\n" . join("\n  ", @final_outputs) . "\n";
		print $log "---\n";
		}

	unless (defined($args{pon})) {

		# let's create a command and write script to combine variants for a PoN
		my $pon_tmp	= join('/', $pon_directory, $date . "_merged_panelOfNormals.vcf");
		my $pon		= join('/', $pon_directory, $date . "_merged_panelOfNormals_trimmed.vcf");
		my $final_pon_link = join('/', $output_directory, 'panelOfNormals.vcf');

		# create a fully merged output (useful for combining with other studies later)
		my $pon_command = generate_pon(
			input		=> join(' ', @pon_vcfs),
			output		=> $pon_tmp,
			java_mem	=> $parameters->{combine}->{java_mem},
			tmp_dir		=> $output_directory,
			out_type	=> 'full'
			);

		$pon_command .= "\n" . check_java_output(
			extra_cmd => "md5sum $pon_tmp > $pon_tmp.md5;\n  bgzip $pon_tmp;\n  tabix -p vcf $pon_tmp.gz;"
			);

		$run_script = write_script(
			log_dir	=> $log_directory,
			name	=> 'create_panel_of_normals',
			cmd	=> $pon_command,
			dependencies	=> join(':', @all_jobs),
			modules		=> [$gatk, 'tabix'],
			max_time	=> $parameters->{combine}->{time},
			mem		=> $parameters->{combine}->{mem},
			hpc_driver	=> $args{hpc_driver}
			);

		$run_id = submit_job(
			jobname		=> 'create_panel_of_normals',
			shell_command	=> $run_script,
			hpc_driver	=> $args{hpc_driver},
			dry_run		=> $args{dry_run},
			log_file	=> $log
			);

		push @all_jobs, $run_id;

		# create a trimmed (sites only) output (this is the panel of normals)
		$pon_command = generate_pon(
			input		=> join(' ', @pon_vcfs),
			output		=> $pon,
			java_mem	=> $parameters->{combine}->{java_mem},
			tmp_dir		=> $output_directory,
			out_type	=> 'trimmed'
			);

		if (-l $final_pon_link) {
			unlink $final_pon_link or die "Failed to remove previous symlink: $final_pon_link";
			}

		symlink($pon, $final_pon_link);

		$pon_command .= "\n" . check_java_output(
			extra_cmd => "  md5sum $pon > $pon.md5"
			);

		$run_script = write_script(
			log_dir	=> $log_directory,
			name	=> 'create_sitesOnly_trimmed_panel_of_normals',
			cmd	=> $pon_command,
			modules	=> [$gatk],
			dependencies	=> join(':', @all_jobs),
			max_time	=> $parameters->{combine}->{time},
			mem		=> $parameters->{combine}->{mem},
			hpc_driver	=> $args{hpc_driver}
			);

		$run_id = submit_job(
			jobname		=> 'create_sitesOnly_trimmed_panel_of_normals',
			shell_command	=> $run_script,
			hpc_driver	=> $args{hpc_driver},
			dry_run		=> $args{dry_run},
			log_file	=> $log
			);
		}

	# collate results
	my $collect_output = join(' ',
		"Rscript $cwd/collect_sequenza_output.R",
		'-d', $output_directory,
		'-p', $tool_data->{project_name},
		'-g', $tool_data->{gtf}
		);

	if (defined($tool_data->{intervals_bed})) {
		$collect_output .= " -t $tool_data->{intervals_bed}";
		}

	$run_script = write_script(
		log_dir	=> $log_directory,
		name	=> 'combine_sequenza_segment_calls',
		cmd	=> $collect_output,
		modules	=> [$r_version],
		dependencies	=> join(':', @all_jobs),
		mem		=> '4G',
		max_time	=> '12:00:00',
		hpc_driver	=> $args{hpc_driver}
		);

	$run_id = submit_job(
		jobname		=> 'combine_sequenza_segment_calls',
		shell_command	=> $run_script,
		hpc_driver	=> $args{hpc_driver},
		dry_run		=> $args{dry_run},
		log_file	=> $log
		);

	# should job metrics be collected
	unless ($args{dry_run}) {

		# collect job stats
		my $collect_metrics = collect_job_stats(
			job_ids	=> join(',', @all_jobs),
			outfile	=> $outfile
			);

		$run_script = write_script(
			log_dir	=> $log_directory,
			name	=> 'output_job_metrics_' . $run_count,
			cmd	=> $collect_metrics,
			dependencies	=> join(':', @all_jobs),
			mem		=> '256M',
			hpc_driver	=> $args{hpc_driver}
			);

		$run_id = submit_job(
			jobname		=> 'output_job_metrics',
			shell_command	=> $run_script,
			hpc_driver	=> $args{hpc_driver},
			dry_run		=> $args{dry_run},
			log_file	=> $log
			);

		# wait until it finishes
		unless ($args{no_wait}) {

			my $complete = 0;

			while (!$complete) {
				sleep(5);
				my $status = `sacct --format='State' -j $run_id`;
				if ($status =~ m/COMPLETED/s) { $complete = 1; }
				elsif ($status !~ m/PENDING|RUNNING/) {
					die("Final VARSCAN accounting job: $run_id finished with errors.");
					}
				}
			}
		}

	# finish up
	print $log "\nProgramming terminated successfully.\n\n";
	close $log;
	}

### RUN IN UNPAIRED MODE
sub unpaired_mode {
	my %args = (
		tool_config		=> undef,
		data_config		=> undef,
		output_directory	=> undef,
		hpc_driver		=> undef,
		del_intermediates	=> undef,
		dry_run			=> undef,
		pon			=> undef,
		no_wait			=> undef,
		@_
		);

	my $tool_config = $args{tool_config};
	my $data_config = $args{data_config};

	### PREAMBLE ######################################################################################

	# load tool config
	my $tool_data_orig = LoadFile($tool_config);
	my $tool_data = error_checking(tool_data => $tool_data_orig, pipeline => 'varscan');

	# organize output and log directories
	my $output_directory = $args{output_directory};
	$output_directory =~ s/\/$//;

	my $log_directory = join('/', $output_directory, 'logs', 'RUN_UNPAIRED_MODE');
	unless(-e $log_directory) { make_path($log_directory); }

	my $log_file = join('/', $log_directory, 'run_VarScan_UNPAIRED_pipeline.log');

	# create a file to hold job metrics
	my (@files, $run_count, $outfile, $touch_exit_status);
	unless ($args{dry_run}) {
		# initiate a file to hold job metrics
		opendir(LOGFILES, $log_directory) or die "Cannot open $log_directory";
		@files = grep { /slurm_job_metrics/ } readdir(LOGFILES);
		$run_count = scalar(@files) + 1;
		closedir(LOGFILES);

		$outfile = $log_directory . '/slurm_job_metrics_' . $run_count . '.out';
		$touch_exit_status = system("touch $outfile");
		if (0 != $touch_exit_status) { Carp::croak("Cannot touch file $outfile"); }

		$log_file = join('/', $log_directory, 'run_VarScan_UNPAIRED_pipeline_' . $run_count . '.log');
		}

	# start logging
	open (my $log, '>', $log_file) or die "Could not open $log_file for writing.";
	$log->autoflush;

	print $log "---\n";
	print $log "Running VarScan variant calling pipeline in tumour-only mode.\n";
	print $log "\n  Tool config used: $tool_config";
	print $log "\n    Reference used: $tool_data->{reference}";

	$reference = $tool_data->{reference};
	
	if (defined($tool_data->{intervals_bed})) {
		print $log "\n    Target intervals (exome): $tool_data->{intervals_bed}";
		}

	if (defined($tool_data->{varscan}->{pon})) {
		print $log "\n      Panel of Normals: $tool_data->{varscan}->{pon}";
		$pon = $tool_data->{varscan}->{pon};
		} elsif (defined($args{pon})) {
		print $log "\n      Panel of Normals: $args{pon}";
		$pon = $args{pon};
		} else {
		print $log "\n      No panel of normals defined! Tumour-only samples will be run without germline filter!";
		}

	print $log "\n    Output directory: $output_directory";
	print $log "\n  Sample config used: $data_config";
	print $log "\n---";

	# set tools and versions
	my $varscan	= 'varscan/' . $tool_data->{varscan_version};
	my $samtools	= 'samtools/' . $tool_data->{samtools_version};
	my $vcftools	= 'vcftools/' . $tool_data->{vcftools_version};
	my $r_version	= 'R/' . $tool_data->{r_version};

	# get user-specified tool parameters
	my $parameters = $tool_data->{varscan}->{parameters};

	### RUN ###########################################################################################
	# get sample data
	my $smp_data = LoadFile($data_config);

	my ($run_script, $varscan_run_id, $run_id, $link, $cleanup_cmd);
	my @all_jobs;

	# process each sample in $smp_data
	foreach my $patient (sort keys %{$smp_data}) {

		print $log "\nInitiating process for PATIENT: $patient\n";

		# find bams
		my @normal_ids = keys %{$smp_data->{$patient}->{'normal'}};
		my @tumour_ids = keys %{$smp_data->{$patient}->{'tumour'}};

		if (scalar(@normal_ids) > 0) {
			print $log "\n>> Normal BAM provided, skipping patient.\n";
			next;
			}

		# create some directories
		my $patient_directory = join('/', $output_directory, $patient);
		unless(-e $patient_directory) { make_path($patient_directory); }

		my $tmp_directory = join('/', $patient_directory, 'TEMP');
		unless(-e $tmp_directory) { make_path($tmp_directory); }

		# indicate this should be removed at the end
		$cleanup_cmd = "rm -rf $tmp_directory";

		my $link_directory = join('/', $patient_directory, 'bam_links');
		unless(-e $link_directory) { make_path($link_directory); }

		# create some symlinks
		foreach my $tumour (@tumour_ids) {
			my @tmp = split /\//, $smp_data->{$patient}->{tumour}->{$tumour};
			$link = join('/', $link_directory, $tmp[-1]);
			symlink($smp_data->{$patient}->{tumour}->{$tumour}, $link);
			}

		# create an array to hold final outputs and all patient job ids
		my (@final_outputs, @patient_jobs);

		# for each tumour-only sample 
		foreach my $sample (@tumour_ids) {

			print $log "  SAMPLE: $sample\n\n";

			my $sample_directory = join('/', $patient_directory, $sample);
			unless(-e $sample_directory) { make_path($sample_directory); }

			$run_id = '';
			$varscan_run_id = '';
			my @snp_jobs;

			# run VarScan
			my $output_stem = join('/', $sample_directory, $sample . '_VarScan');

			my $varscan_command = get_varscan_snv_command(
				tumour		=> $smp_data->{$patient}->{tumour}->{$sample},
				output_stem	=> $output_stem,
				java_mem	=> $parameters->{varscan}->{java_mem},
				tmp_dir		=> $tmp_directory,
				intervals	=> $tool_data->{intervals_bed}
				);

			$varscan_command .= "\n\nmd5sum $output_stem.cns.vcf > $output_stem.cns.vcf.md5";
			$cleanup_cmd .= "\nrm " . $output_stem . ".cns.vcf";

			# check if this should be run
			if ('Y' eq missing_file($output_stem . '.cns.vcf.md5')) {

				# record command (in log directory) and then run job
				print $log "Submitting job for VarScan SNV Caller...\n";

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_varscan_snv_' . $sample,
					cmd	=> $varscan_command,
					modules	=> [$samtools, $varscan],
					max_time	=> $parameters->{varscan}->{time},
					mem		=> $parameters->{varscan}->{mem},
					hpc_driver	=> $args{hpc_driver}
					);

				$varscan_run_id = submit_job(
					jobname		=> 'run_varscan_snv_' . $sample,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @snp_jobs, $varscan_run_id;
				push @patient_jobs, $varscan_run_id;
				push @all_jobs, $varscan_run_id;
				}
			else {
				print $log "Skipping VarScan SNV Caller because this has already been completed!\n";
				}

			# filter results
			my $filter_command = get_filter_command(
				input		=> $output_stem . '.cns.vcf',
				output_stem	=> $output_stem . '_filtered',
				pon		=> $pon,
				tmp_dir		=> $tmp_directory
				);

			$filter_command .= "\n\n" . join(' ',
				'md5sum', join('.', "$output_stem\_filtered", 'snp', 'vcf'),
				'>', join('.', "$output_stem\_filtered", 'snp', 'vcf.md5')
				);

			$filter_command .= "\n\n" . join(' ',
				'md5sum', join('.', "$output_stem\_filtered", 'indel','vcf'),
				'>', join('.', "$output_stem\_filtered", 'indel', 'vcf.md5')
				);

			my $required = "$output_stem\_filtered.snp.vcf.md5";

			# add intermediates to cleanup
			$cleanup_cmd .= "\nrm $output_stem\_filtered.snp.vcf";
			$cleanup_cmd .= "\nrm $output_stem\_filtered.indel.vcf";

			# check if this should be run
			if ('Y' eq missing_file($required)) {

				# record command (in log directory) and then run job
				print $log "Submitting job for VCF-Filter...\n";

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_vcf_filter_' . $sample,
					cmd	=> $filter_command,
					modules	=> [$vcftools],
					dependencies	=> $varscan_run_id,
					max_time	=> $parameters->{filter}->{time},
					mem		=> $parameters->{filter}->{mem},
					hpc_driver	=> $args{hpc_driver}
					);

				$run_id = submit_job(
					jobname		=> 'run_vcf_filter_' . $sample,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);

				push @snp_jobs, $run_id;
				push @patient_jobs, $run_id;
				push @all_jobs, $run_id;
				}
			else {
				print $log "Skipping VCF-Filter because this has already been completed!\n";
				}

			my @var_types = qw(snp indel);
			foreach my $vtype (@var_types) {

				### Run variant annotation (VEP + vcf2maf)
				my $final_maf = join('.', $output_stem, $vtype . '_annotated.maf');
				my $final_vcf = join('.', $output_stem, $vtype . '_annotated.vcf');

				my $vcf2maf_cmd = get_vcf2maf_command(
					input		=> join('.', "$output_stem\_filtered", $vtype, 'vcf'),
					tumour_id       => $sample,
					reference       => $reference,
					ref_type	=> $tool_data->{ref_type},
					output		=> $final_maf,
					tmp_dir		=> $tmp_directory,
					vcf2maf		=> $tool_data->{annotate}->{vcf2maf_path},
					vep_path	=> $tool_data->{annotate}->{vep_path},
					vep_data	=> $tool_data->{annotate}->{vep_data},
					filter_vcf      => $tool_data->{annotate}->{filter_vcf}
					);

				my @dependencies = grep { $_ ne '' } @snp_jobs;
				if (scalar(@dependencies) == 0) { @dependencies[0] = ''; }

				# check if this should be run
				if ('Y' eq missing_file($final_maf . '.md5')) {

					# IF THIS FINAL STEP IS SUCCESSFULLY RUN,
					$vcf2maf_cmd .= "\n\n" . join("\n",
						"if [ -s " . join(" ] && [ -s ", $final_maf) . " ]; then",
						"  md5sum $final_maf > $final_maf.md5",
						"  mv $tmp_directory/$sample\_VarScan\_filtered.$vtype.vep.vcf $final_vcf",
						"  md5sum $final_vcf > $final_vcf.md5",
						"  bgzip $final_vcf",
						"  tabix -p vcf $final_vcf.gz",
						"else",
						'  echo "FINAL OUTPUT MAF is missing; not running md5sum/bgzip/tabix..."',
						"fi"
						);

					# record command (in log directory) and then run job
					print $log "Submitting job for tumour-only vcf2maf ($vtype)...\n";

					$run_script = write_script(
						log_dir => $log_directory,
						name    => join('_', 'run_vcf2maf_and_VEP', $vtype, $sample),
						cmd     => $vcf2maf_cmd,
						modules => ['perl', $samtools, 'tabix'],
						dependencies	=> join(':', @dependencies),
						max_time	=> $tool_data->{annotate}->{time},
						mem		=> $tool_data->{annotate}->{mem}->{$vtype.'s'},
						hpc_driver	=> $args{hpc_driver}
						);

					$run_id = submit_job(
						jobname		=> join('_', 'run_vcf2maf_and_VEP', $vtype, $sample),
						shell_command	=> $run_script,
						hpc_driver	=> $args{hpc_driver},
						dry_run		=> $args{dry_run},
						log_file	=> $log
						);

					push @patient_jobs, $run_id;
					push @all_jobs, $run_id;
					}
				else {
					print $log "Skipping vcf2maf ($vtype) because this has already been completed!\n";
					}

				push @final_outputs, $final_maf;
				}
			}

		# should intermediate files be removed
		# run per patient
		if ($args{del_intermediates}) {

			if (scalar(@patient_jobs) == 0) {
				`rm -rf $tmp_directory`;
				} else {

				print $log "Submitting job to clean up temporary/intermediate files...\n";

				# make sure final output exists before removing intermediate files!
				my @files_to_check;
				foreach my $tmp ( @final_outputs ) {
					$tmp .= '.md5';
					push @files_to_check, $tmp;
					}

				$cleanup_cmd = join("\n",
					"if [ -s " . join(" ] && [ -s ", @files_to_check) . " ]; then",
					"  $cleanup_cmd",
					"else",
					'  echo "One or more FINAL OUTPUT FILES is missing; not removing intermediates"',
					"fi"
					);

				$run_script = write_script(
					log_dir	=> $log_directory,
					name	=> 'run_cleanup_' . $patient,
					cmd	=> $cleanup_cmd,
					dependencies	=> join(':', @patient_jobs),
					mem		=> '256M',
					hpc_driver	=> $args{hpc_driver}
					);

				$run_id = submit_job(
					jobname		=> 'run_cleanup_' . $patient,
					shell_command	=> $run_script,
					hpc_driver	=> $args{hpc_driver},
					dry_run		=> $args{dry_run},
					log_file	=> $log
					);
				}
			}

		print $log "\nFINAL OUTPUT:\n" . join("\n  ", @final_outputs) . "\n";
		print $log "---\n";
		}

	# collate results
	my $collect_output = join(' ',
		"Rscript $cwd/collect_snv_output.R",
		'-d', $output_directory,
		'-p', $tool_data->{project_name},
		'-g', $tool_data->{gtf}
		);

	$run_script = write_script(
		log_dir	=> $log_directory,
		name	=> 'combine_variant_calls',
		cmd	=> $collect_output,
		modules	=> [$r_version],
		dependencies	=> join(':', @all_jobs),
		mem		=> '16G',
		max_time	=> '24:00:00',
		hpc_driver	=> $args{hpc_driver}
		);

	$run_id = submit_job(
		jobname		=> 'combine_variant_calls',
		shell_command	=> $run_script,
		hpc_driver	=> $args{hpc_driver},
		dry_run		=> $args{dry_run},
		log_file	=> $log
		);

	# should job metrics be collected
	unless ($args{dry_run}) {

		# collect job stats
		my $collect_metrics = collect_job_stats(
			job_ids	=> join(',', @all_jobs),
			outfile	=> $outfile
			);

		$run_script = write_script(
			log_dir	=> $log_directory,
			name	=> 'output_job_metrics_' . $run_count,
			cmd	=> $collect_metrics,
			dependencies	=> join(':', @all_jobs),
			mem		=> '256M',
			hpc_driver	=> $args{hpc_driver}
			);

		$run_id = submit_job(
			jobname		=> 'output_job_metrics',
			shell_command	=> $run_script,
			hpc_driver	=> $args{hpc_driver},
			dry_run		=> $args{dry_run},
			log_file	=> $log
			);

		# wait until it finishes
		unless ($args{no_wait}) {

			my $complete = 0;

			while (!$complete) {
				sleep(5);
				my $status = `sacct --format='State' -j $run_id`;
				if ($status =~ m/COMPLETED/s) { $complete = 1; }
				elsif ($status !~ m/PENDING|RUNNING/) {
					die("Final VARSCAN accounting job: $run_id finished with errors.");
					}
				}
			}
		}

	# finish up
	print $log "\nProgramming terminated successfully.\n\n";
	close $log;
	}

### GETOPTS AND DEFAULT VALUES #####################################################################
# declare variables
my ($tool_config, $data_config, $output_directory);
my $hpc_driver = 'slurm';
my ($remove_junk, $dry_run, $help, $no_wait);
my $run_mode = 'paired';
my $panel_of_normals = undef;

# get command line arguments
GetOptions(
	'h|help'	=> \$help,
	'd|data=s'	=> \$data_config,
	't|tool=s'	=> \$tool_config,
	'o|out_dir=s'	=> \$output_directory,
	'c|cluster=s'	=> \$hpc_driver,
	'remove'	=> \$remove_junk,
	'dry-run'	=> \$dry_run,
	'no-wait'	=> \$no_wait,
	'mode=s'	=> \$run_mode,
	'pon=s'		=> \$panel_of_normals
	);

if ($help) {
	my $help_msg = join("\n",
		"Options:",
		"\t--help|-h\tPrint this help message",
		"\t--data|-d\t<string> data config (yaml format)",
		"\t--tool|-t\t<string> tool config (yaml format)",
		"\t--out_dir|-o\t<string> path to output directory",
		"\t--pon\t<string> path to panel of normals (optional)",
		"\t--mode\t<string> one of paired (will generate a panel of normals) or unpaired (default: paired)",
		"\t--cluster|-c\t<string> cluster scheduler (default: slurm)",
		"\t--remove\t<boolean> should intermediates be removed? (default: false)",
		"\t--dry-run\t<boolean> should jobs be submitted? (default: false)",
		"\t--no-wait\t<boolean> should we exit after job submission (true) or wait until all jobs have completed (false)? (default: false)"
		);

	print "$help_msg\n";
	exit;
	}

# do some quick error checks to confirm valid arguments	
if (!defined($tool_config)) { die("No tool config file defined; please provide -t | --tool (ie, tool_config.yaml)"); }
if (!defined($data_config)) { die("No data config file defined; please provide -d | --data (ie, sample_config.yaml)"); }
if (!defined($output_directory)) { die("No output directory defined; please provide -o | --out_dir"); }

if ('paired' eq $run_mode) {
	main(
		tool_config		=> $tool_config,
		data_config		=> $data_config,
		output_directory	=> $output_directory,
		pon			=> $panel_of_normals,
		hpc_driver		=> $hpc_driver,
		del_intermediates	=> $remove_junk,
		dry_run			=> $dry_run,
		no_wait			=> $no_wait
		);

	} elsif ('unpaired' eq $run_mode) {

	unpaired_mode(
		tool_config		=> $tool_config,
		data_config		=> $data_config,
		output_directory	=> $output_directory,
		pon			=> $panel_of_normals,
		hpc_driver		=> $hpc_driver,
		del_intermediates	=> $remove_junk,
		dry_run			=> $dry_run,
		no_wait			=> $no_wait
		);

	} else { die("--mode must be one of paired (for T/N mode and PoN generation) or unpaired"); }
