#!/usr/bin/env perl
### pughlab_rnaseq_pipeline.pl #####################################################################
use AutoLoader 'AUTOLOAD';
use strict;
use warnings;
use Carp;
use POSIX qw(strftime);
use Getopt::Std;
use Getopt::Long;
use File::Basename;
use File::Path qw(make_path);
use YAML qw(LoadFile);

my $cwd = dirname($0);
require "$cwd/scripts/utilities.pl";

####################################################################################################
# version       author	  	comment
# 1.0		sprokopec       script to run PughLab RNASeq pipeline

### USAGE ##########################################################################################
# pughlab_rnaseq_pipeline.pl -c tool_config.yaml -d data.yaml
#
# where:
#	- tool_config.yaml contains tool versions and parameters, output directory, reference
#	information, etc.
#	- data_config.yaml contains sample information (YAML file containing paths to FASTQ files,
#	generated by create_fastq_yaml.pl)

### SUBROUTINES ####################################################################################

### MAIN ###########################################################################################
sub main {
	my %args = (
		tool_config	=> undef,
		data_config	=> undef,
		@_
		);

	my $tool_config = $args{tool_config};
	my $data_config = $args{data_config};

	### PREAMBLE ######################################################################################

	# load tool config
	my $tool_data_orig = LoadFile($tool_config);
	my $tool_data = error_checking(tool_data => $tool_data_orig);
	my $date = strftime "%F", localtime;
	my $timestamp = strftime "%F_%H-%M-%S", localtime;

	# check for and/or create output directories
	my $output_directory = $tool_data->{output_dir};
	$output_directory =~ s/\/$//;
	my $log_directory = join('/', $output_directory, 'logs', 'run_RNA_pipeline_' . $timestamp);

	unless(-e $output_directory) { make_path($output_directory); }
	unless(-e $log_directory) { make_path($log_directory); }

	# start logging
	my $log_file = join('/', $log_directory, 'run_RNASeq_pipeline.log');
	open (my $log, '>', $log_file) or die "Could not open $log_file for writing.";

	print $log "---\n";
	print $log "Running PughLab RNA-Seq pipeline.\n";
	print $log "\n  Tool config used: $tool_config";
	print $log "\n    Output directory: $output_directory";
	print $log "\n      Batch: $timestamp";
	print $log "\n  Sample config used: $data_config";
	print $log "\n---";

	### MAIN ###########################################################################################

	my ($fc_run_id, $star_run_id, $gatk_run_id, $vc_run_id, $rsem_run_id, $starfus_run_id) = '';

	## run FusionCatcher pipeline
	my $fc_directory = join('/', $output_directory, 'FusionCatcher', $timestamp);
	unless(-e $fc_directory) { make_path($fc_directory); }

	if (defined($tool_data->{fusioncatcher_config})) {

		my $fc_command = join(' ',
			"perl $cwd/scripts/fusioncatcher.pl",
			"-o", $fc_directory,
			"-t", $tool_data->{fusioncatcher_config},
			"-d", $data_config,
			"-h", $tool_data->{HPC_driver},
			"-r", $tool_data->{del_intermediates},
			"-n", $tool_data->{dry_run},
			"-p", $tool_data->{project_name}
			);

		# record command (in log directory) and then run job
		print $log "\n\nSubmitting job for fusioncatcher.pl\n";
		print $log "  COMMAND: $fc_command\n\n";

		$fc_run_id = `$fc_command`;
		sleep(5);
		}

	## run STAR-alignment pipeline
	my $star_directory = join('/', $output_directory, 'STAR', $timestamp);
	unless(-e $star_directory) { make_path($star_directory); }

	# indicate yaml containing STAR-aligned BAMs
	my $star_output_yaml = join('/', $star_directory, 'star_bam_config.yaml');

	if (defined($tool_data->{star_config})) {

		my $star_command = join(' ',
			"perl $cwd/scripts/star.pl",
			"-o", $star_directory,
			"-t", $tool_data->{star_config},
			"-d", $data_config,
			"-h", $tool_data->{HPC_driver},
			"-r", $tool_data->{del_intermediates},
			"-n", $tool_data->{dry_run}
			);

		# record command (in log directory) and then run job
		print $log "Submitting job for star.pl\n";
		print $log "  COMMAND: $star_command\n\n";

		$star_run_id = `$star_command`;
		sleep(5);

		print $log ">>> Final STAR job id: $star_run_id\n";

		}

	## run STAR-Fusion pipeline
	my $starfus_directory = join('/', $output_directory, 'STAR-Fusion', $timestamp);
	unless(-e $starfus_directory) { make_path($starfus_directory); }

	if (defined($tool_data->{star_fusion_config})) {

		my $starfus_command = join(' ',
			"perl $cwd/scripts/star_fusion.pl",
			"-o", $starfus_directory,
			"-t", $tool_data->{star_fusion_config},
			"-d", $star_output_yaml,
			"-h", $tool_data->{HPC_driver},
			"-r", $tool_data->{del_intermediates},
			"-n", $tool_data->{dry_run},
			"-p", $tool_data->{project_name},
			"--depends", $star_run_id
			);

		# record command (in log directory) and then run job
		print $log "Submitting job for star_fusion.pl\n";
		print $log "  COMMAND: $starfus_command\n\n";

		$starfus_run_id = `$starfus_command`;
		sleep(5);
		}

	## run RSEM pipeline
	my $rsem_directory = join('/', $output_directory, 'RSEM', $timestamp);
	unless(-e $rsem_directory) { make_path($rsem_directory); }

	if (defined($tool_data->{rsem_config})) {

		my $rsem_command = join(' ',
			"perl $cwd/scripts/rsem.pl",
			"-o", $rsem_directory,
			"-t", $tool_data->{rsem_config},
			"-d", $star_output_yaml,
			"-h", $tool_data->{HPC_driver},
			"-r", $tool_data->{del_intermediates},
			"-n", $tool_data->{dry_run},
			"-p", $tool_data->{project_name},
			"--depends", $star_run_id
			);

		# record command (in log directory) and then run job
		print $log "Submitting job for rsem.pl\n";
		print $log "  COMMAND: $rsem_command\n\n";
		$rsem_run_id = `$rsem_command`;
		sleep(5);
		}

	## run GATK indel realignment/recalibration pipeline
	my $gatk_directory = join('/', $output_directory, 'GATK', $timestamp);
	unless(-e $gatk_directory) { make_path($gatk_directory); }

	# indicate yaml containing GATK-processed BAMs
	my $gatk_output_yaml = join('/', $gatk_directory, 'gatk_bam_config.yaml');

	if (defined($tool_data->{gatk_config})) {

		my $gatk_command = join(' ',
			"perl $cwd/scripts/gatk.pl",
			"--rna",
			"-o", $gatk_directory,
			"-t", $tool_data->{gatk_config},
			"-d", $star_output_yaml,
			"-h", $tool_data->{HPC_driver},
			"-r", $tool_data->{del_intermediates},
			"-n", $tool_data->{dry_run},
			"--depends", $star_run_id
			);

		# record command (in log directory) and then run job
		print $log "Submitting job for gatk.pl\n";
		print $log "  COMMAND: $gatk_command\n\n";
		$gatk_run_id = `$gatk_command`;
		sleep(5);
		print $log ">>> Final GATK job id: $gatk_run_id\n";

		}

	## run GATK's HaplotypeCaller pipeline
	my $vc_directory = join('/', $output_directory, 'HaplotypeCaller', $timestamp);
	unless(-e $vc_directory) { make_path($vc_directory); }

	if (defined($tool_data->{haplotype_caller_config})) {

		my $vc_command = join(' ',
			"perl $cwd/scripts/haplotype_caller.pl",
			"--rna",
			"-o", $vc_directory,
			"-t", $tool_data->{haplotype_caller_config},
			"-d", $gatk_output_yaml,
			"-h", $tool_data->{HPC_driver},
			"-r", $tool_data->{del_intermediates},
			"-n", $tool_data->{dry_run},
			"-p", $tool_data->{project_name},
			"--depends", $gatk_run_id
			);

		# record command (in log directory) and then run job
		print $log "Submitting job for haplotype_caller.pl\n";
		print $log "  COMMAND: $vc_command\n\n";
		$vc_run_id = `$vc_command`;
		sleep(5);
		}

	# finish up
	print $log "\nProgramming terminated successfully.\n\n";
	close $log;

	}

### GETOPTS AND DEFAULT VALUES #####################################################################
# declare variables
my $tool_config;
my $data_config;

# read in command line arguments
GetOptions(
	'c|config=s'	=> \$tool_config,
	'd|data=s'	=> \$data_config
	 );

if (!defined($tool_config)) { die("No tool config file defined; please provide -c | --config (ie, tool_config.yaml)"); }
if (!defined($data_config)) { die("No data config file defined; please provide -d | --data (ie, sample_config.yaml)"); }

main(tool_config => $tool_config, data_config => $data_config);
