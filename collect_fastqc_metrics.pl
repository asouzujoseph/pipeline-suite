#!/usr/bin/env perl
### collect_fastqc_metrics.pl ######################################################################
use AutoLoader 'AUTOLOAD';
use strict;
use warnings;
use Carp;
use Getopt::Std;
use Getopt::Long;
use POSIX qw(strftime);
use File::Basename;
use File::Path qw(make_path);
use YAML qw(LoadFile);

my $cwd = dirname($0);
require "$cwd/shared/utilities.pl";

####################################################################################################
# version       author		comment
# 1.0		sprokopec       script to collect quality metrics from fastq or BAM files

### USAGE ##########################################################################################
# collect_fastqc_metrics.pl -t tool_config.yaml -c data_config.yaml --dna { or --rna }
#
# where:
# 	- tool_config.yaml contains tool versions and parameters, output directory,
# 	reference information, etc.
# 	- data_config.yaml contains sample information (YAML file containing paths to fastq
# 	generated by create_Fastq_yaml.pl)

### DEFINE SUBROUTINES #############################################################################
# format command to run FASTQC
sub get_fastqc_cmd {
	my %args = (
		input		=> undef,
		output_dir	=> undef,
		@_
		);

	my $fastqc_command = join(' ',
		'fastqc -o', $args{output_dir},
		$args{input}
		);

	return($fastqc_command);
	}

# format command to extract metrics
sub get_fastqc_metrics {
	my %args = (
		output_dir	=> undef,
		@_
		);

	my $extract_cmd = join("\n",
		"cd $args{output_dir}",
		"rm *html",
		'for i in *.zip',
		'  do',
		'    TMP=${i//.zip/};',
		'    OUT=${i//.zip/_metrics.txt};',
		'    unzip $i $TMP/fastqc_data.txt;',
		'    cp $TMP/fastqc_data.txt $OUT;',
		'    rm -rf $TMP/;',
		'  done'
		);

	return($extract_cmd);
	}

### MAIN ###########################################################################################
sub main{
	my %args = (
		tool_config	=> undef,
		data_config	=> undef,
		data_type	=> undef,
		@_
		);

	my $tool_config = $args{tool_config};
	my $data_config = $args{data_config};

	### PREAMBLE ######################################################################################

	# load tool config
	my $tool_data = LoadFile($tool_config);
	$tool_data->{date} = strftime "%F", localtime;

	# organize output directories
	$tool_data->{output_dir} =~ s/\/$//;
	my $output_directory = join('/', $tool_data->{output_dir}, $tool_data->{date} . '_fastqc');
	my $log_directory = join('/', $output_directory, 'logs');

	unless(-e $output_directory) { make_path($output_directory); }
	unless(-e $log_directory) { make_path($log_directory); }

	# start logging
	print "---\n";
	print "Running pipeline to collect quality metrics...\n";
	print "\n  Tool config used: $tool_config";
	print "\n    Output directory: $output_directory";
	print "\n  Sample config used: $data_config";
	print "\n---";

	# create a file to hold job metrics
	my (@files, $run_count, $outfile, $touch_exit_status);
	if ('N' eq $tool_data->{dry_run}) {
		# initiate a file to hold job metrics (ensures that an existing file isn't overwritten by concurrent jobs)
		opendir(LOGFILES, $log_directory) or die "Cannot open $log_directory";
		@files = grep { /slurm_job_metrics/ } readdir(LOGFILES);
		$run_count = scalar(@files) + 1;
		closedir(LOGFILES);

		$outfile = $log_directory . '/slurm_job_metrics_' . $run_count . '.out';
		$touch_exit_status = system("touch $outfile");
		if (0 != $touch_exit_status) { Carp::croak("Cannot touch file $outfile"); }
		}

	### RUN ###########################################################################################
	# get sample data
	my $smp_data = LoadFile($data_config);

	my ($run_script, $run_id);
	my @all_jobs;

	# process each sample in $smp_data
	foreach my $patient (sort keys %{$smp_data}) {

		foreach my $sample (sort keys %{$smp_data->{$patient}}) {

			my @fastqs;

			# is this DNA or RNA?
			if ( 'dna' eq $args{data_type} ) {

				my @libraries = keys %{$smp_data->{$patient}->{$sample}->{libraries}};

				foreach my $lib ( @libraries ) {

					my @lanes = keys %{$smp_data->{$patient}->{$sample}->{libraries}->{$lib}->{runlanes}};
					foreach my $lane ( @lanes ) {

						my $r1 = $smp_data->{$patient}->{$sample}->{libraries}->{$lib}->{runlanes}->{$lane}->{fastq}->{R1};
						my $r2 = $smp_data->{$patient}->{$sample}->{libraries}->{$lib}->{runlanes}->{$lane}->{fastq}->{R2};

						push @fastqs, $r1;
						push @fastqs, $r2;
						}
					}
				} elsif ( 'rna' eq $args{data_type} ) {

				my @lanes = keys %{$smp_data->{$patient}->{$sample}->{runlanes}};

				foreach my $lane ( @lanes ) {

					my $r1 = $smp_data->{$patient}->{$sample}->{runlanes}->{$lane}->{R1};
					my $r2 = $smp_data->{$patient}->{$sample}->{runlanes}->{$lane}->{R2};

					push @fastqs, $r1;
					push @fastqs, $r2;
					}
				}

			# Run FASTQC
			my $fastqc_cmd = get_fastqc_cmd( 
				input		=> join(' ', @fastqs),
				output_dir	=> $output_directory
				);

			# record command (in log directory) and then run job
			print "Submitting job for FASTQC...\n";

			$run_script = write_script(
				log_dir	=> $log_directory,
				name	=> 'run_fastqc_' . $sample,
				cmd	=> $fastqc_cmd,
				modules	=> ['fastqc'],
				max_time	=> $tool_data->{parameters}->{fastqc}->{time},
				mem		=> $tool_data->{parameters}->{fastqc}->{mem},
				hpc_driver	=> $tool_data->{HPC_driver}
				);

			$run_id = submit_job(
				jobname		=> 'run_fastqc_' . $sample,
				shell_command	=> $run_script,
				hpc_driver	=> $tool_data->{HPC_driver},
				dry_run		=> $tool_data->{dry_run}
				);

			push @all_jobs, $run_id;

			# get MD5SUMs (if necessary)
			my $md5_cmd = "cd $output_directory\n";
			foreach my $file ( @fastqs ) {
				my @parts = split /\//, $file;
				my $stem = $parts[-1];
				$md5_cmd .= "md5sum $file > $stem.md5\n";
				}

			# record command (in log directory) and then run job
			print "Submitting job for MD5SUM...\n";

			$run_script = write_script(
				log_dir	=> $log_directory,
				name	=> 'run_md5sums_' . $sample,
				cmd	=> $md5_cmd,
				max_time	=> $tool_data->{parameters}->{md5sum}->{time},
				mem		=> $tool_data->{parameters}->{md5sum}->{mem},
				hpc_driver	=> $tool_data->{HPC_driver}
				);

			$run_id = submit_job(
				jobname		=> 'run_md5sums_' . $sample,
				shell_command	=> $run_script,
				hpc_driver	=> $tool_data->{HPC_driver},
				dry_run		=> $tool_data->{dry_run}
				);

			push @all_jobs, $run_id;

			}
		}

	# format command to extract info from output
	my $extract_cmd = get_fastqc_metrics(output_dir => $output_directory);

	# format command to collate results
	my $combine_cmd = "Rscript $cwd/combine_key_metrics.R";

	my $collate_cmd = $extract_cmd . "\n" . $combine_cmd;
	$collate_cmd .= "\nrm *metrics.txt";
	$collate_cmd .= "\nrm *md5";

	print "Submitting job to extract and collate results...\n";

	$run_script = write_script(
		log_dir	=> $log_directory,
		name	=> 'run_collate_results',
		cmd	=> $collate_cmd,
		modules	=> ['R'],
		dependencies	=> join(',', @all_jobs),
		max_time	=> '01:00:00',
		mem		=> '1G',
		hpc_driver	=> $tool_data->{HPC_driver}
		);

	$run_id = submit_job(
		jobname		=> 'run_collate_results',
		shell_command	=> $run_script,
		hpc_driver	=> $tool_data->{HPC_driver},
		dry_run		=> $tool_data->{dry_run}
		);

	push @all_jobs, $run_id;

	print "\nFINAL OUTPUT: $output_directory/fastqc_key_metrics.tsv\n";
	print "---\n";

	# collect job metrics if not dry_run
	if ('N' eq $tool_data->{dry_run}) {

		# collect job stats
		my $collect_metrics = collect_job_stats(
			job_ids => join(',', @all_jobs),
			outfile => $outfile
			);

		$run_script = write_script(
			log_dir	=> $log_directory,
			name	=> 'output_job_metrics_' . $run_count,
			cmd	=> $collect_metrics,
			dependencies	=> join(',', @all_jobs),
			max_time	=> '0:10:00',
			mem		=> '1G',
			hpc_driver	=> $tool_data->{HPC_driver}
			);

		$run_id = submit_job(
			jobname		=> 'output_job_metrics',
			shell_command	=> $run_script,
			hpc_driver	=> $tool_data->{HPC_driver},
			dry_run		=> $tool_data->{dry_run}
			);
		}

	# finish up
	print "\nProgramming terminated successfully.\n\n";

	}

### GETOPTS AND DEFAULT VALUES #####################################################################
# declare variables
my $tool_config;
my $data_config;
my ($dna, $rna);

# get command line arguments
GetOptions(
	't|tool=s'	=> \$tool_config,
	'c|config=s'	=> \$data_config,
	'dna'		=> \$dna,
	'rna'		=> \$rna
	);

# do some quick error checks to confirm valid arguments	
if (!defined($tool_config)) { die("No tool config file defined; please provide -t | --tool (ie, tool_config.yaml)"); }
if (!defined($data_config)) { die("No data config file defined; please provide -c | --config (ie, sample_config.yaml)"); }

# check if input is DNA or RNA
my $data_type;
if ($dna && $rna) {
	die("Please don't set both --dna and --rna; can only be one of these!");
	} elsif ($dna) {
	$data_type = 'dna';
	} elsif ($rna) {
	$data_type = 'rna';
	} else {
	die("No data type set; please set one of --dna or --rna to proceed!");
	}

main(tool_config => $tool_config, data_config => $data_config, data_type => $data_type);
